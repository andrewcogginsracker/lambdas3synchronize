{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Demo Cloudformation script to launch an instance, create S3, Lambda function and SSM document to automatically synchronize instance with S3 Bucket",
  "Metadata": {
    "Version": "v1.3",
    "Comments": "Generated by Ansible",
    "AWS::CloudFormation::Interface": {}
  },
  "Parameters": {
    "ImageId": {
      "Type": "String",
      "Default": "",
      "Description": "The image ID to be used to build the EC2 Instance. OPTIONAL"
    },
    "InstanceType": {
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m3.medium",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ],
      "ConstraintDescription": "Must be a valid EC2 instance type. Default is t2.micro",
      "Description": "Select instance type"
    },
    "VPCID": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "Select Virtual Private Cloud ID"
    },
    "AppSubnet": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Subnets for Application"
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair."
    },
    "Environment": {
      "Description": "Application environment for which this network is being created. e.g. Development/Production.",
      "Type": "String",
      "Default": "Development",
      "AllowedValues": [
        "Development",
        "Integration",
        "PreProduction",
        "Production",
        "Staging",
        "Test"
      ]
    },
    "NotificationEmail": {
      "Description": "EMail address for notifications operations. OPTIONAL",
      "Type": "String",
      "Default": "noemail@email.com",
      "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
      "ConstraintDescription": "Must be a valid email address."
    },
    "CreationPolicyTimeOut": {
      "Description": "Time to wait for the number of signals for the creation policy. H/M/S Hours/Minutes/Seconds",
      "Type": "String",
      "Default": "20M",
      "ConstraintDescription": "#H#M#S where each # is the number of hours or minutes or seconds"
    },
    "InstanceSecurityGroupList": {
      "Description": "A list that contains the EC2 security groups to assign to the Amazon EC2 instance",
      "Type": "List<AWS::EC2::SecurityGroup::Id>"
    },
    "CreateS3Bucket":{
      "Description": "On first launch, select False. Once deployed successfully, update the stack and set to True",
              "Type":"String",
      "Default":"False",
      "AllowedValues": [
       "True",
        "False"
      ]

    }
  },
  "Mappings": {
    "AWSRegionArch2AMI": {
      "us-west-1": {
        "64": "ami-96d897f6"
      },
      "us-east-1": {
        "64": "ami-8fe79998"
      },
      "ap-northeast-1": {
        "64": "ami-04ba6965"
      },
      "sa-east-1": {
        "64": "ami-a88211c4"
      },
      "ap-northeast-2": {
        "64": "ami-cf71a4a1"
      },
      "ap-southeast-1": {
        "64": "ami-eea7028d"
      },
      "ap-southeast-2": {
        "64": "ami-0e3a0a6d"
      },
      "us-west-2": {
        "64": "ami-a24598c2"
      },
      "ap-south-1": {
        "64": "ami-47c4b128"
      },
      "eu-central-1": {
        "64": "ami-72c33e1d"
      },
      "eu-west-1": {
        "64": "ami-284c375b"
      }
    }
  },
  "Conditions": {
    "isImageId": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ImageId"
            },
            ""
          ]
        }
      ]
    },
    "isNotification": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "NotificationEmail"
            },
            "noemail@email.com"
          ]
        }
      ]
    },
    "LaunchCondition":{
      "Fn::Equals": [
            {
              "Ref": "CreateS3Bucket"
            },
            "True"
          ]

    }
  },
  "Resources": {
   "S3BucketforSynchronization": {
     "Condition":"LaunchCondition",
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "NotificationConfiguration": {
          "LambdaConfigurations": [
            {
              "Function": {
                "Fn::GetAtt": [
                  "LambdaFunction",
                  "Arn"
                ]
              },
              "Event": "s3:ObjectCreated:*"
            },
                        {
              "Function": {
                "Fn::GetAtt": [
                  "LambdaFunction",
                  "Arn"
                ]
              },
              "Event": "s3:ObjectRemoved:*"
            }
          ]
        },
        "AccessControl": "BucketOwnerFullControl"
      }
    },
    "LambdaFunction": {
      "DependsOn": "LambdaExecutionRole",
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
  "ZipFile": {
    "Fn::Join": [
      "",
      [
        "var aws = require('aws-sdk');","\n",
        "var ssm = new aws.SSM();","\n",
        "console.log('Loading function');","\n",
        "","\n",
        "exports.handler = function(event, context, callback) {","\n",
        "var s3bucket = event.Records[0].s3.bucket.name;","\n",
        "var s3object = event.Records[0].s3.object.key;","\n",
        "console.log('value1 = event.Records[0].s3.bucket.name');","\n",
        "callback(null, s3bucket);","\n",
        "","\n",
        "var params = {","\n",
        "DocumentName: '", {"Ref":"SSMDocument"},"', /* required */","\n",
        "InstanceIds: [ /* required */","\n",
        "'",
        {"Ref":"ARInstance"},
        "'","\n",
        "/* more items */","\n",
        " ],","\n",
        "Comment: 'Synchronizing S3 Bucket',","\n",
        "Parameters: {","\n",
        "S3Bucket: [","\n",
        "s3bucket,","\n",
        "/* more items */","\n",
        " ],","\n",
        " Directory:[","\n",
        "'/home/s3sync',","\n",
        "]","\n",
        "/* anotherKey: ... */","\n",
        " },","\n",
        " TimeoutSeconds: 60","\n",
        "};","\n",
        "ssm.sendCommand(params, function(err, data) {","\n",
        "if (err) console.log(err, err.stack); // an error occurred","\n",
        "else     console.log(data);           // successful response","\n",
        "});","\n",
        "};","\n"
      ]
    ]
  }
},
        "Description": "Runs an SSM Document on an S3 new object event",
        "FunctionName": "S3Synchronize",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": 25
      }
    },
    "LambdaExecutionRole": {
      "DependsOn":"ARInstance",
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "Stmt1466570077332",
                  "Action": [
                    "ssm:SendCommand"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "bucketperm": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "FunctionName": {"Ref":"LambdaFunction"},
                "Principal": "s3.amazonaws.com"
            }
},
    "CloudFormationLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 30
      }
    },
    "ARInstance": {
      "Type": "AWS::EC2::Instance",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": {
            "Fn::Join": [
              "",
              [
                "PT",
                {
                  "Ref": "CreationPolicyTimeOut"
                }
              ]
            ]
          },
          "Count": 1
        }
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::If": [
            "isImageId",
            {
              "Ref": "ImageId"
            },
            {
              "Fn::FindInMap": [
                "AWSRegionArch2AMI",
                {
                  "Ref": "AWS::Region"
                },
                "64"
              ]
            }
          ]
        },
        "SecurityGroupIds": {
          "Ref": "InstanceSecurityGroupList"
        },
        "SubnetId": {
          "Ref": "AppSubnet"
        },
        "IamInstanceProfile": {
          "Ref": "InstanceRoleInstanceProfile"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-",
                  "TestLambdaSync"
                ]
              ]
            }
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeType": "gp2",
              "DeleteOnTermination": "True",
              "VolumeSize": "8"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "apt-get update\n",
                "apt-get -y install python-setuptools python-pip\n",
                "mkdir -p aws-cfn-bootstrap-latest\n",
                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                "easy_install aws-cfn-bootstrap-latest\n",
                "cp -a aws-cfn-bootstrap-latest/init/ubuntu/cfn-hup /etc/init.d/cfn-hup\n",
                "chmod +x /etc/init.d/cfn-hup\n",
                "update-rc.d cfn-hup defaults\n",
                "/usr/local/bin/cfn-init -v --configsets Init",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource ARInstance ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "Comment": "Install Tools",
        "AWS::CloudFormation::Init": {
          "configSets": {
            "Init": [
              "cfnConfig",
              "awscli",
              "install_Logs",
              "SSMInstall",

              "webInstall",
              "finalize"
            ],
            "Update": [
              "cfnConfig",
              "finalize"
            ]
          },
          "cfnConfig": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack={{ StackName }}\n",
                      "region={{ Region }}\n"
                    ]
                  ]
                },
                "context": {
                  "StackName": {
                    "Ref": "AWS::StackName"
                  },
                  "Region": {
                    "Ref": "AWS::Region"
                  }
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.ARInstance.Metadata.AWS::CloudFormation::Init\n",
                      "action=/usr/local/bin/cfn-init -v --configsets Update",
                      "         --stack {{ StackName }}",
                      "         --resource ARInstance ",
                      "         --region {{ Region }}",
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                },
                "context": {
                  "StackName": {
                    "Ref": "AWS::StackName"
                  },
                  "Region": {
                    "Ref": "AWS::Region"
                  }
                }
              }
            },
            "commands": {
              "StartCFNHUP": {
                "command": "service cfn-hup start",
                "ignoreErrors": "false"
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "awscli": {
            "commands": {
              "1-InstallAWSCLI": {
                "command": "pip install awscli",
                "ignoreErrors": "false"
              }
            }
          },

          "SSMInstall": {
            "commands": {
              "1-DownloadInstallSSM": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "curl https://amazon-ssm-",
                      {
                        "Ref": "AWS::Region"
                      },
                      ".s3.amazonaws.com/latest/debian_amd64/amazon-ssm-agent.deb -o /tmp/amazon-ssm-agent.deb && dpkg -i /tmp/amazon-ssm-agent.deb"
                    ]
                  ]
                },
                "test": "if [ 'dpkg -s amazon-ssm-agent | grep installed' != \"\" ]; then true; else false; fi"
              },
              "2-StartSSMAgentService": {
                "command": "service amazon-ssm-agent start",
                "test": "if [ $(ps aux | grep amazon-ssm-agent | grep -v grep) !=\"\" ]; then true; else false; fi"
              }
            }
          },
          "install_Logs": {
            "files": {
              "/etc/awslogs/awslogs.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[general]\n",
                      "state_file= /var/awslogs/state/agent-state\n",
                      "[/var/log/cloud-init.log]\n",
                      "file = /var/log/cloud-init.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudFormationLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cloud-init.log\n",
                      "initial_position = start_of_file\n",
                      "datetime_format = \n",
                      "[/var/log/cloud-init-output.log]\n",
                      "file = /var/log/cloud-init-output.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudFormationLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cloud-init-output.log\n",
                      "initial_position = start_of_file\n",
                      "datetime_format = \n",
                      "[/var/log/cfn-init.log]\n",
                      "file = /var/log/cfn-init.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudFormationLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cfn-init.log\n",
                      "initial_position = start_of_file\n",
                      "datetime_format = \n",
                      "[/var/log/cfn-hup.log]\n",
                      "file = /var/log/cfn-hup.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudFormationLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cfn-hup.log\n",
                      "initial_position = start_of_file\n",
                      "datetime_format = \n",
                      "[/var/log/cfn-wire.log]\n",
                      "file = /var/log/cfn-wire.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudFormationLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cfn-wire.log\n",
                      "initial_position = start_of_file\n",
                      "datetime_format = \n"
                    ]
                  ]
                },
                "mode": "0444",
                "owner": "root",
                "group": "root"
              },
              "/etc/awslogs/awscli.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[plugins]\n",
                      "cwlogs = cwlogs\n",
                      "[default]\n",
                      "region = ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "0444",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "1-CreateStateDirectory": {
                "command": "mkdir -p /var/awslogs/state",
                "test": "if [ ! -d /var/awslogs/state ]; then false; else true; fi"
              },
              "1-CreateConfDirectory": {
                "command": "mkdir -p /etc/awslogs",
                "ignoreErrors": "false"
              },
              "3-Install": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O; chmod +x awslogs-agent-setup.py; python ./awslogs-agent-setup.py -n -c /etc/awslogs/awslogs.conf --region ",
                      {
                        "Ref": "AWS::Region"
                      }
                    ]
                  ]
                },
                "ignoreErrors": "false"
              }
            }
          },
          "webInstall": {
            "packages": {
              "apt": {
                "apache2": []
              }
            },
            "services": {
              "sysvinit": {
                "apache2": {
                  "enabled": "true",
                  "ensureRunning": "true"
                }
              }
            }
          },
          "finalize": {
            "commands": {
              "1-CFNSignal": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "/usr/local/bin/cfn-signal -e 0 ",
                      "--stack ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      " --resource ARInstance",
                      " --region ",
                      {
                        "Ref": "AWS::Region"
                      }
                    ]
                  ]
                },
                "ignoreErrors": "true"
              }
            }
          }
        }
      }
    },
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "InstanceRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "InstanceRole",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:Describe*"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ssm:DescribeAssociation",
                "ssm:CreateAssociation",
                "ssm:GetDocument",
                "ssm:ListAssociations",
                "ssm:UpdateAssociationStatus",
                "ssm:UpdateInstanceInformation"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ec2messages:AcknowledgeMessage",
                "ec2messages:DeleteMessage",
                "ec2messages:FailMessage",
                "ec2messages:GetEndpoint",
                "ec2messages:GetMessages",
                "ec2messages:SendReply"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudwatch:PutMetricData"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ec2:DescribeInstanceStatus"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ds:CreateComputer",
                "ds:DescribeDirectories"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "InstanceRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "SSMDocument": {
      "Type": "AWS::SSM::Document",
      "Properties": {
        "Content": {
          "schemaVersion": "1.2",
          "description": "Sync an S3 Bucket with to local directory",
          "parameters": {
            "S3Bucket": {
              "type": "String",
              "description": "The S3 Bucket to sync"
            },
            "Directory": {
              "type": "String",
              "description": "The local directory to Synchronize to the S3 Bucket",
              "default": "/home/s3sync"
            }
          },
          "runtimeConfig": {
            "aws:runShellScript": {
              "properties": [
                {
                  "runCommand": [
                    "#!/bin/bash",
                    "S3_ENDPOINT='s3://'{{S3Bucket}}",
                    "echo {{S3Bucket}}",
                    "echo $S3_ENDPOINT",
                    "mkdir -p {{Directory}}",
                    "aws s3 sync --delete $S3_ENDPOINT {{Directory}}"
                  ]
                }
              ]
            }
          }
        }
      }
    }
  }
}